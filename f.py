import requests
import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
URL = "https://aiu.c-platonus.kz"
TELEGRAM_TOKEN = "8393077875:AAFw2GDnfN_MXSaeXYjGmReZxrYDs6-9XO4"
CHAT_ID = -4806969856   # id –≥—Ä—É–ø–ø—ã

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_status = None        # True = —Ä–∞–±–æ—Ç–∞–µ—Ç, False = –ª–µ–∂–∏—Ç
status_since = time.time()  # –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞
def check_site():
    try:
        response = requests.get(URL, timeout=5)
        return True, response.status_code
    except requests.exceptions.RequestException:
        return False, None

# –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
def get_status_message():
    global last_status, status_since

    is_up, code = check_site()
    now = time.time()

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äì —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if last_status is None or is_up != last_status:
        last_status = is_up
        status_since = now

    # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    minutes = int((now - status_since) / 60)

    if is_up:
        return f"‚úÖ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {URL}\n–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {code}\n–ê–ø—Ç–∞–π–º: {minutes} –º–∏–Ω"
    else:
        return f"‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {URL}\n–î–∞—É–Ω–∞–π–º: {minutes} –º–∏–Ω"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    message = get_status_message()
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ Platonus.\n\n{message}",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç"
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç":
        message = get_status_message()
        await update.message.reply_text(message)

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def periodic_check(context: ContextTypes.DEFAULT_TYPE):
    message = get_status_message()
    await context.bot.send_message(chat_id=CHAT_ID, text=message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue = app.job_queue
    job_queue.run_repeating(periodic_check, interval=300, first=5)

    # –ó–∞–ø—É—Å–∫
    app.run_polling()

if __name__ == "__main__":
    main()
